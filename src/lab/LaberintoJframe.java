/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab;

/**
 *
 * @author juanba
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Stack;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.MatteBorder;

/**
 *
 * @author juanba
 */
public class LaberintoJframe extends javax.swing.JFrame {
    Matrix Mat = new Matrix();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaberintoJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaberintoJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaberintoJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaberintoJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Scanner scanner = new Scanner( System.in );
        JOptionPane.showMessageDialog(null, "Controles:"
                + "\nCTRL + CLICK: Indicar Inicio (verde) y Fin (rojo)"
                + "\nCLICK: Activar / Desactivar Muro"
                + "\nSHIFT + MOUSE: Activar Varios Muros"
                + "\nALT + MOUSE: Desactivar Varios Muros"
                + "\nENTER: Iniciar Optimizacion");
        String input = JOptionPane.showInputDialog("Ingresar longitud de laberinto: (Ex: 20) ");
        int longitud = Integer.parseInt(input);
        new LaberintoJframe(longitud).setVisible(true);  
    }
    
    public LaberintoJframe(int longitud) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }
                Mat.setLongitud(longitud);
                int matriz[][] = Mat.createMatrix();
                Mat.setMatrix(matriz);

                JFrame frame = new JFrame("Laberinto");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setLayout(new BorderLayout());
                frame.add(new GridPane(longitud));
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
                frame.addKeyListener(new KeyListener(){
                    @Override
                        public void keyPressed(KeyEvent e) {  
                            int matriz[][] = Mat.getMatrix();
                            
                            
                            if(e.getKeyCode() == KeyEvent.VK_ENTER){
                                int matriz2[][] = new int[longitud][longitud];
                                
                                for (int i = 0; i < longitud; i++) {
                                    System.arraycopy(matriz[i], 0, matriz2[i], 0, longitud);
                                }                       
                                
                                String input = JOptionPane.showInputDialog("Tipo de Optimizacion: \n1. Normal\n2. Mejor Combinacion\n3. Ruta Optima");
                                int opcion = Integer.parseInt(input);
                                
                                switch(opcion) {
                                    case 1: {
                                        RouteA ruta = new RouteA(matriz2, longitud);
                                        System.out.println("Movimientos: " + ruta.solveLaberinto());
                                        ruta.popAll();
                                        paintAllAgain(frame, matriz2);
                                        frame.repaint();
                                    }
                                        break;
                                        
                                    case 2: {
                                        RouteB ruta = new RouteB(matriz2, longitud);
                                        ruta.solveLaberintoB();
                                        ruta.solveLaberinto(ruta.getBestRoute());
                                        ruta.popAll();
                                        paintAllAgain(frame, matriz2);
                                        frame.repaint();
                                    }
                                        break;
                                    case 3: {                                       
                                        RouteC ruta = new RouteC(matriz2, longitud);
                                        ruta.solveLaberintoFinal();
                                        ruta.popAll();
                                        paintAllAgain(frame, matriz2);
                                        frame.repaint();
                                        
                                    }
                                        break;
                                }
                                
                                /*
                                for (int row = 0; row < longitud; row++) {
                                    for (int col = 0; col < longitud; col++) {
                                        System.out.print(matriz2[row][col]);     
                                    }
                                    System.out.print("\n");
                                }
                                System.out.print("\n");
                                */
                            }
                        }

                    @Override
                    public void keyTyped(KeyEvent e) {}

                    @Override
                    public void keyReleased(KeyEvent e) {}             
                });      
            }
        });
    }
    
    public class GridPane extends JPanel {

        public GridPane(int longitud) {
            setLayout(new GridBagLayout());

            GridBagConstraints gbc = new GridBagConstraints();
            for (int row = 0; row < longitud; row++) {
                for (int col = 0; col < longitud; col++) {
                    gbc.gridx = col;
                    gbc.gridy = row;
                                     
                    CellPane cellPane = new CellPane();
                    Border border;
                    
                    String cellname = String.format("%d_%d",row, col);
                    cellPane.setName(cellname);
                                   
                    // set outer wall
                    if ( row == 0 || row == longitud - 1 || col == 0 || col == longitud - 1 ) {
                        cellPane.setBackground(Color.BLACK);
                    }
                          
                    // set borders
                    if (row < longitud - 1) {
                        if (col < longitud - 1) {
                            border = new MatteBorder(1, 1, 0, 0, Color.GRAY);                            
                        } else {
                            border = new MatteBorder(1, 1, 0, 1, Color.GRAY);                            
                        }
                    } else {
                        if (col < longitud - 1) {
                            border = new MatteBorder(1, 1, 1, 0, Color.GRAY);                            
                        } else {
                            border = new MatteBorder(1, 1, 1, 1, Color.GRAY);                           
                        }
                    }
                    
                    cellPane.setBorder(border);
                    add(cellPane, gbc);
                    
                    // fill matrix outer wall
                    if (cellPane.getBackground() == Color.BLACK)
                        Mat.setMatValues(row, col, 1);
                }
            } 
        }
    }
    
    public class CellPane extends JPanel {

        private Color defaultBackground = getBackground();
        private Color currentBackground;

        public CellPane() {
            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                            String comp = e.getComponent().getName();
                            String[] strArray = comp.split("_");
                            int[] intArray = new int[strArray.length];
                            for(int i = 0; i < strArray.length; i++) {
                                    intArray[i] = Integer.parseInt(strArray[i]);
                                }
                            
                        if ((e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK) {
                            currentBackground = getBackground();       
                            if(currentBackground != Color.GREEN)
                                setBackground(Color.GREEN);
                            if(currentBackground != Color.RED)
                                setBackground(Color.RED);    
                        } else {
                            if(getBackground() == Color.BLACK)
                                setBackground(defaultBackground);
                            else
                                setBackground(Color.BLACK);
                        }
                        
                        //Update matrix changes
                        if (getBackground() == Color.BLACK)
                            Mat.setMatValues(intArray[0], intArray[1], 1);
                        if (getBackground() == Color.GREEN)
                            Mat.setMatValues(intArray[0], intArray[1], 2);
                        if (getBackground() == Color.RED)
                            Mat.setMatValues(intArray[0], intArray[1], 3);
                        if (getBackground() != Color.RED && getBackground() != Color.BLACK && getBackground() != Color.GREEN )
                            Mat.setMatValues(intArray[0], intArray[1], 0);
                }
                
                @Override
                public void mouseEntered(MouseEvent e) {
                    String comp = e.getComponent().getName();
                    String[] strArray = comp.split("_");
                    int[] intArray = new int[strArray.length];
                    for(int i = 0; i < strArray.length; i++) {
                            intArray[i] = Integer.parseInt(strArray[i]);
                        }
                    
                    if ((e.getModifiers() & ActionEvent.SHIFT_MASK) == ActionEvent.SHIFT_MASK) {
                        setBackground(Color.BLACK);
                        if (getBackground() == Color.BLACK)
                            Mat.setMatValues(intArray[0], intArray[1], 1);
                        if (getBackground() != Color.BLACK)
                            Mat.setMatValues(intArray[0], intArray[1], 0);
                    }
                    
                    if ((e.getModifiers() & ActionEvent.ALT_MASK) == ActionEvent.ALT_MASK) {
                        setBackground(new Color(238, 238, 238));
                        if (getBackground() == Color.BLACK)
                            Mat.setMatValues(intArray[0], intArray[1], 1);
                        if (getBackground() != Color.BLACK)
                            Mat.setMatValues(intArray[0], intArray[1], 0);
                    }     
                }            
            });     
        }
        @Override
        public Dimension getPreferredSize() {
            return new Dimension(25, 25);
        }      
    }
    
    public void paintAllAgain(Container parent, int[][] matriz )
    {
        for (Component c : parent.getComponents())
        {
            String cellname = c.getName();
            if( cellname != null
                    && !cellname.equals("null.glassPane") 
                    && !cellname.equals("null.layeredPane") 
                    && !cellname.equals("null.contentPane")) {
                
                String[] strArray = cellname.split("_");
                int[] intArray = new int[strArray.length];
                for(int i = 0; i < strArray.length; i++) {
                    intArray[i] = Integer.parseInt(strArray[i]);
                }
            
                if(matriz[intArray[0]][intArray[1]] == 0) {
                    c.setBackground(new Color(238, 238, 238));
                }
            
                if(matriz[intArray[0]][intArray[1]] == 1) {
                    c.setBackground(Color.BLACK); 
                }
            
                if(matriz[intArray[0]][intArray[1]] == 2) {
                    c.setBackground(Color.GREEN); 
                }
            
                if(matriz[intArray[0]][intArray[1]] == 3) {
                    c.setBackground(Color.RED); 
                }
            
                if(matriz[intArray[0]][intArray[1]] == 8) {
                    c.setBackground(new Color(0,206,209)); 
                }                 
            }

            if (c instanceof Container)
                paintAllAgain((Container)c, matriz);
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

